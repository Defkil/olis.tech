---
import PostWindow from "../../post-window/PostWindow.astro";
import type {PostWindowProps} from "../../../env";

const {posts} = Astro.props
---
<masonry-grid>
  <div class="hidden js--src">
    {posts.map((post: PostWindowProps) => (
      <PostWindow post={post}/>))}
  </div>
  <div class="js--dest masonry"></div>
</masonry-grid>
<script>
  import {debounce} from "../../../lib/helper/debounce";

  interface MasonryChild {
    dom: HTMLElement;
    height: number;
  }

  class MasonryGrid extends HTMLElement {
    debounceHandleResize = this.runOnWidthChange(debounce(this.setupMasonry.bind(this), 200))

    lastWidth = window.innerWidth;
    runOnWidthChange(cb: () => void): () => void {
      return () => {
        if (window.innerWidth !== this.lastWidth) {
          this.lastWidth = window.innerWidth;
          cb();
        }
      }
    }

    connectedCallback() {
      window.addEventListener('resize', this.debounceHandleResize);
      if (document.fonts) {
        document.fonts.load('1em "Outfit Variable"').then(() => {
          this.setupMasonry();
        });
      } else {
        this.setupMasonry();
      }
    }

    disconnectedCallback() {
      window.removeEventListener('resize', this.debounceHandleResize);
    }

    renderElementHeights(): MasonryChild[] {
      return Array.from(this.querySelectorAll('.js--src > *')).map((dom) => {
        const height = dom.getBoundingClientRect().height;
        return {
          dom: dom as HTMLElement, height,
        };
      });
    }

    calculateColumnCount(): number {
      const screenWidth = window.innerWidth;
      if (screenWidth <= 768) {
        return 1;
      } else if (screenWidth <= 1024) {
        return 2;
      }
      return 3;
    }

    calculateColumnHeight(column: MasonryChild[]): number {
      return column.reduce((height, child) => {
        return height + child.height;
      }, 0);
    }

    calculateColumns(children: MasonryChild[], columnCount: number): MasonryChild[][] {
      const columns: MasonryChild[][] = Array.from({length: columnCount}, () => []);

      for (const child of children) {
        const smallColumnIndex = columns.reduce((smallestIndex, column, index) => {
          if (this.calculateColumnHeight(column) < this.calculateColumnHeight(columns[smallestIndex]!)) {
            return index;
          }
          return smallestIndex;
        }, 0);
        columns[smallColumnIndex]!.push(child);
      }

      return columns;
    }

    setupMasonry() {
      const elements = this.renderElementHeights();
      const columnsCount = this.calculateColumnCount();
      const columns = this.calculateColumns(elements, columnsCount);

      const htmlColumns = columns.map((column) => {
        const columnHtml = column.map((child) => {
          return child.dom.outerHTML;
        }).join('');
        return `<div class="masonry__column">${columnHtml}</div>`;
      }).join('');

      const dest = this.querySelector('.js--dest')!;
      dest.innerHTML = htmlColumns;
    }
  }

  customElements.define('masonry-grid', MasonryGrid);
</script>

<style is:global>

  .masonry {
    display: flex;
    gap: 24px;
  }

  .masonry__column {
    display: flex;
    flex-direction: column;
    gap: 24px;
    margin: 0 auto;
  }

  .hidden {
    position: absolute;
    top: -10000px;
    right: 0;
    display: flex;
  }
</style>
