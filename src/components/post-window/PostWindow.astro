---
import './PostWindow.scss';
import type {PostWindowProps} from "../../env";

const {post, bigWindow}: {
  post: PostWindowProps, bigWindow?: boolean
} = Astro.props

const isBigWindow = bigWindow || false

if (!post) {
  throw new Error('PostWindow: post is undefined')
}
---
<div class="window">
  <div class="window__header">
    <span class="window__date">{post.lastPublishOrUpdate}</span>
    <div class="window__dots">
      <div class="window__dot"></div>
      <div class="window__dot"></div>
      <div class="window__dot"></div>
    </div>
  </div>
  <h1 class="window__header-title">
    <slot name="title"/>
  </h1>
  <div class="window__image-container" class:list={[{'window__image-container--big': bigWindow}]}>
    <img class="window__image" loading="lazy" src={post.image} alt={post.imageAlt}>
  </div>
  {!isBigWindow && (
    <h2 class="window__title">{post.title}</h2>
    <p class="window__excerpt">{post.excerpt}</p>
    <div class="window__footer">
      Weiterlesen âž”
    </div>
  )}
  {isBigWindow && (
    <div class="window__slot">
      <slot/>
    </div>
    <div class="window__footer">
      <share-link class="window__share-link" data-title={post.title} data-text={post.excerpt} data-url={post.link}>
        <span class="window__footer-link js--share">Teilen</span>
      </share-link>
    </div>
  )}
  <div class="window__category">
    Aus
    <a href={post.categoryLink} class="window__category-link">{post.category}</a>
  </div>
</div>
<script>
  import {share} from '../../lib/helper/helperShare'

  class ShareLink extends HTMLElement {

    listener: () => void
    connectedCallback() {
      this.listener = () => share(
        this.dataset.title,
        this.dataset.text,
        this.dataset.url
      )
      this.addEventListener('click', this.listener)
    }

    disconnectedCallback() {
      this.removeEventListener('click', this.listener)
    }
  }

  customElements.define('share-link', ShareLink)
</script>
