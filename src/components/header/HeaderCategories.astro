---
import {getCollection} from "astro:content";
import {categories} from "../../content/_categories";

const categoriesData: {
  title: string,
  collection: string,
  description: string,
  count: number,
  lastPublishOrUpdate: string,
  link: string,
  lastPosts: {
    title: string, link: string, image?: string
  }[]
}[] = []

for (const category of categories) {
  const unsortedCategoryEntries = await getCollection(category.collection as any);
  const categoryEntries = unsortedCategoryEntries.sort((a, b) => {
    if (a.data.publishDate > b.data.publishDate) {
      return -1;
    }
    if (a.data.publishDate < b.data.publishDate) {
      return 1;
    }
    return 0;
  });

  let lastPublishOrUpdate = categoryEntries[0].data.publishDate;
  for (const article of categoryEntries) {
    if (article.data.publishDate > lastPublishOrUpdate) {
      lastPublishOrUpdate = article.data.publishDate;
    }
    if (article.data.updateDate > lastPublishOrUpdate) {
      lastPublishOrUpdate = article.data.updateDate;
    }
  }

  categoriesData.push({
    title: category.title,
    collection: category.collection,
    description: category.description,
    count: categoryEntries.length,
    lastPublishOrUpdate: lastPublishOrUpdate.toLocaleString('de-DE', {
      year: 'numeric', month: 'numeric', day: 'numeric'
    }),
    lastPosts: categoryEntries.slice(0, 3).map((article) => ({
      title: article.data.title, link: '/' + category.collection + '/' + article['slug'], image: article.data.image,
    })),
    link: '/' + category.collection,
  })
}

const {selectedCategory} = Astro.props

let initialCategory = categoriesData[0]!;
if (selectedCategory) {
  initialCategory = categoriesData.find((category) => category.collection === selectedCategory)!;
}
---
<div class="background">
  <header-categories>
    <div class="container">
      <div class="sidebar">
        <h2 class="sidebar__title">Kategorien</h2>
        {categoriesData.map((category) => (
          <button
            class="sidebar__button border shadow shadow--hover js--category-button"
            data-link={category.link}
            data-description={category.description}
            data-count={category.count}
            data-last-publish-or-update={category.lastPublishOrUpdate}
            data-last-posts={category.lastPosts}>
            {category.title}
          </button>))}
      </div>
      <div class="info border shadow">
        <h2 class="info__title js--title">{initialCategory.title}</h2>
        <p class="info__description js--description">{initialCategory.description}</p>
        <div class="info__details">
          <span><span class="js--details__count">{initialCategory.count}</span> Artikel</span>
          <span>Letzte Ã„nderung am <span class="js--details__last">{initialCategory.lastPublishOrUpdate}</span></span>
        </div>
      </div>
      <div class="posts">
        {initialCategory.lastPosts.map((post) => (<a href={post.link} data-swup-preload>
          <div class="post border shadow shadow--hover">
            {post.image && <img class="post__image" src={post.image} alt={post.title}/>}
            <div class="post__title">{post.title}</div>
          </div>
        </a>))}
        <a class="js--link" href={initialCategory.link} data-swup-preload>
          <div class="post post--small border shadow shadow--hover">
            <div class="post__title post__title--small-centered-text">
              Alle Artikel aus <span class="js--title">{initialCategory.title}</span> anzeigen
            </div>
          </div>
        </a>
      </div>
    </div>
  </header-categories>
</div>
<script>
  class HeaderCategories extends HTMLElement {
    dom = {
      title: this.querySelectorAll('.js--title')!,
      link: this.querySelectorAll('.js--link')!,
      description: this.querySelector('.js--description')!,
      count: this.querySelector('.js--details__count')!,
      last: this.querySelector('.js--details__last')!
    }

    connectedCallback() {
      this.registerButtons();
    }

    registerButtons() {
      const buttons: NodeListOf<HTMLElement> = this.querySelectorAll('.js--category-button');
      buttons.forEach((button) => {
        button.addEventListener('click', () => {
          this.dom.title.forEach((title) => title.textContent = button.textContent);
          this.dom.link.forEach((link) => {
            if (link instanceof HTMLAnchorElement) {
              link.href = button.dataset.link!;
            }
          });
          this.dom.description.textContent = button.dataset.description!;
          this.dom.count.textContent = button.dataset.count!;
          this.dom.last.textContent = button.dataset.lastPublishOrUpdate!;
          const swup: any = (window as any).swup;
          //todo update last posts
          if (swup) {
            swup.preloadPages()
          }
        })
      })
    }
  }

  customElements.define('header-categories', HeaderCategories);
</script>
<style>
  .background {
    min-height: 280px;
    padding: 48px 0 40px;
    background-color: var(--color-senary);
  }

  .container {
    display: flex;
    gap: 24px;
    max-width: var(--container-max-width);
    margin: 0 auto;
  }

  .sidebar {
    width: 100%;
    max-width: 340px;
    padding: 26px 0;
  }

  .sidebar__title {
    margin: 16px 0 42px;

    font-family: var(--font-family-hightlight);
    font-size: 3rem;
    font-weight: 500;
    line-height: 0;
    color: var(--color-white);
  }

  /* todo active button with a star */

  .sidebar__button {
    cursor: pointer;
    margin: 6px 24px 6px 0;
    padding: 10px 20px;
    border-radius: var(--border-radius);
  }

  .info {
    display: flex;
    flex-direction: column;

    width: 100%;
    height: 100%;

    background: blue;
  }

  .info__title, .info__description, .info__details {
    padding: 0 26px;
    color: var(--color-white);
  }

  .info__title {
    font-family: var(--font-family-hightlight);
    font-size: 3rem;
    font-weight: 500;
    line-height: 0;
  }

  .info__description {
    font-weight: 300;
  }

  .info__details {
    display: flex;
    align-items: center;
    justify-content: space-between;

    margin-top: auto;
    padding-bottom: 24px;
  }

  .posts {
    flex-grow: 1;
    width: 100%;
  }

  .posts a {
    text-decoration: none;
  }

  .post {
    display: flex;

    width: 100%;
    height: 80px;
    margin-bottom: 16px;

    background: var(--color-tertiary);
    border-radius: var(--border-radius);
  }

  .post--small {
    display: grid;
  }

  .post__image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: var(--border-radius) 0 0 var(--border-radius);
  }

  .post__title {
    margin: auto 0;
    padding: 0 26px;

    font-size: 1.5rem;
    font-weight: 500;
    color: var(--color-white);
  }

  .post__title--small-centered-text {
    font-size: 1.25rem;
    text-align: center;
  }
</style>
