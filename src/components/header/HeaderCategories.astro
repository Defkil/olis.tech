---
import {getCollection} from "astro:content";
import {categories} from "../../content/_categories";
import './HeaderCategories.scss'
const categoriesData: {
  title: string,
  collection: string,
  description: string,
  count: number,
  lastPublishOrUpdate: string,
  link: string,
  lastPosts: {
    title: string, link: string
  }[]
}[] = []

for (const category of categories) {
  const unsortedCategoryEntries = await getCollection(category.collection as any);
  const categoryEntries = unsortedCategoryEntries.sort((a, b) => {
    if (a.data.publishDate > b.data.publishDate) {
      return -1;
    }
    if (a.data.publishDate < b.data.publishDate) {
      return 1;
    }
    return 0;
  });

  let lastPublishOrUpdate = categoryEntries[0].data.publishDate;
  for (const article of categoryEntries) {
    if (article.data.publishDate > lastPublishOrUpdate) {
      lastPublishOrUpdate = article.data.publishDate;
    }
    if (article.data.updateDate > lastPublishOrUpdate) {
      lastPublishOrUpdate = article.data.updateDate;
    }
  }

  categoriesData.push({
    title: category.title,
    collection: category.collection,
    description: category.description,
    count: categoryEntries.length,
    lastPublishOrUpdate: lastPublishOrUpdate.toLocaleString('de-DE', {
      year: 'numeric', month: 'numeric', day: 'numeric'
    }),
    lastPosts: categoryEntries.slice(0, 3).map((article) => ({
      title: article.data.title, link: '/' + category.collection + '/' + article['slug'],
    })),
    link: '/' + category.collection,
  })
}

const {selectedCategory} = Astro.props

let initialCategory = categoriesData[0]!;
if (selectedCategory) {
  initialCategory = categoriesData.find((category) => category.collection === selectedCategory)!;
}
---
<div class="background">
  <header-categories>
    <div class="container">
      <div class="sidebar">
        <h2 class="sidebar__title">Kategorien</h2>
        {categoriesData.map((category) => (
          <button
            class="sidebar__button border shadow shadow--hover js--category-button"
            data-link={category.link}
            data-description={category.description}
            data-count={category.count}
            data-last-publish-or-update={category.lastPublishOrUpdate}
            data-last-posts={category.lastPosts}>
            {category.title}
          </button>))}
      </div>
      <div class="info">
        <h2 class="info__title js--title" class:list={[{'info__title--small': initialCategory.title.length > 12}]}>
          {initialCategory.title}</h2>
        <p class="info__description js--description">{initialCategory.description}</p>
        <div class="info__details">
          <span>Beiträge: <span class="js--details__count">{initialCategory.count}</span></span>
          <span>Letzte Änderung am <span class="js--details__last">{initialCategory.lastPublishOrUpdate}</span></span>
        </div>
      </div>
      <div class="posts">
        {initialCategory.lastPosts.map((post) => (<a href={post.link} data-swup-preload>
          <div class="post border shadow shadow--hover">
            <div class="post__title">{post.title}</div>
          </div>
        </a>))}
        <a class="js--link" href={initialCategory.link} data-swup-preload>
          <div class="post post--small border shadow shadow--hover">
            <div class="post__title post__title--small-centered-text">
              Alles aus <span class="js--title">{initialCategory.title}</span> anzeigen
            </div>
          </div>
        </a>
      </div>
    </div>
  </header-categories>
</div>
<script>
  class HeaderCategories extends HTMLElement {
    dom = {
      title: this.querySelectorAll('.js--title')!,
      link: this.querySelectorAll('.js--link')!,
      description: this.querySelector('.js--description')!,
      count: this.querySelector('.js--details__count')!,
      last: this.querySelector('.js--details__last')!
    }

    connectedCallback() {
      this.registerButtons();
    }

    registerButtons() {
      const buttons: NodeListOf<HTMLElement> = this.querySelectorAll('.js--category-button');
      buttons.forEach((button) => {
        button.addEventListener('click', () => {
          this.dom.title.forEach((title) => {
            title.textContent = button.textContent
            if (title.classList.contains('info__title')){
              if (title.textContent!.trim().length > 12) {
                title.classList.add('info__title--small')
              } else {
                title.classList.remove('info__title--small')
              }
            }
          });
          this.dom.link.forEach((link) => {
            if (link instanceof HTMLAnchorElement) {
              link.href = button.dataset.link!;
            }
          });
          this.dom.description.textContent = button.dataset.description!;
          this.dom.count.textContent = button.dataset.count!;
          this.dom.last.textContent = button.dataset.lastPublishOrUpdate!;
          const swup: any = (window as any).swup;
          //todo update last posts
          if (swup) {
            swup.preloadPages()
          }
        })
      })
    }
  }

  customElements.define('header-categories', HeaderCategories);
</script>
