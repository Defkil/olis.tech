---
import {contentLinkPost} from "../../lib/content/contentLink";
import {helperLastPublishOrUpdate} from "../../lib/helper/helperLastDate";
import {contentGetCategoryPosts} from "../../lib/content/contentGetPosts";
import {contentLinkCategory} from "../../lib/content/contentLink";
import {helperShowDate} from "../../lib/helper/helperShowDate";
import {categories} from "../../const/categories";
import './HeaderCategories.scss'

const categoriesData: {
  title: string,
  collection: string,
  description: string,
  count: number,
  lastPublishOrUpdate: string,
  link: string,
  lastPosts: {
    title: string, link: string
  }[]
}[] = []

for (const category of categories) {
  const data = await contentGetCategoryPosts(category.collection)
  categoriesData.push({
    title: category.title,
    collection: category.collection,
    description: category.description,
    count: data.total,
    lastPublishOrUpdate: helperShowDate(helperLastPublishOrUpdate(data.posts)),
    lastPosts: data.posts.map((article) => ({
      title: article.title, link: contentLinkPost(category.collection, article.slug)
    })),
    link: contentLinkCategory(category.collection),
  })
}

const {selectedCategory} = Astro.props

let initialCategory = categoriesData[0]!;
if (selectedCategory) {
  initialCategory = categoriesData.find((category) => category.collection === selectedCategory)!;
}
---
<div class="background">
  <header-categories>
    <div class="container">
      <div class="sidebar">
        <h2 class="sidebar__title">Kategorien</h2>
        <div class="sidebar__container">
          {categoriesData.map((category) => (
            <button
              class="sidebar__button border shadow shadow--hover js--category-button"
              data-link={category.link}
              data-description={category.description}
              data-count={category.count}
              data-last-publish-or-update={category.lastPublishOrUpdate}
              data-last-posts={JSON.stringify(category.lastPosts)}>
              {category.title}
            </button>))}
        </div>
      </div>
      <div class="posts">
        <div class="posts__details">
          <span>Anzahl Beiträge: <span class="js--details__count">{initialCategory.count}</span></span>
          <span>Letzte Aktualisierung am <span class="js--details__last">{initialCategory.lastPublishOrUpdate}</span></span>
        </div>
        <div class="js--posts">
          {initialCategory.lastPosts.map((post) => (<a href={post.link}>
            <div class="post border shadow shadow--hover">
              <div class="post__title">{post.title}</div>
            </div>
          </a>))}
        </div>
        <a class="js--link" href={initialCategory.link} style="margin-top: auto">
          <div class="post post--small border shadow shadow--hover">
            <div class="post__title post__title--small-centered-text">
              Alles aus <span class="js--title">{initialCategory.title}</span> anzeigen
            </div>
          </div>
        </a>
      </div>
    </div>
  </header-categories>
</div>
<script>
  interface CategoryData {
    title: string,
    link: string,
    description: string,
    count: string,
    lastPublishOrUpdate: string,
    posts: {title: string, link: string}[]
  }

  abstract class DomChanger {
    private domElements: NodeListOf<Element>
    constructor(private selector: string, private contentAtr: keyof CategoryData) {
      if (!this.selector || this.selector.length === 0) {
        throw new Error('Selector is empty')
      }

      if (!this.contentAtr || this.contentAtr.length === 0) {
        throw new Error('Content attribute is empty')
      }

      this.domElements = document.querySelectorAll(selector)

      if (this.domElements.length === 0) {
        throw new Error('No dom elements found')
      }

      this.handler = this.handler.bind(this)
    }

    handler(data: CategoryData) {
      const content = data[this.contentAtr]
      this.domElements.forEach((domElement) => {
        this.setDomContent(domElement, content)
      })
    }

    abstract setDomContent(domElement: Element, content: any): void
  }

  class DomChangerString extends DomChanger {
    setDomContent(domElement: Element, content: string): void {
      domElement.textContent = content
    }
  }

  class DomChangerLinkHref extends DomChanger {
    setDomContent(domElement: Element, content: string) {
      if(domElement instanceof HTMLAnchorElement) {
        domElement.href = content
      }
    }
  }

  class DomChangerPosts extends DomChanger {
    setDomContent(domElement: Element, content: {title: string, link: string}[]) {
      let postHtml = ''

      if(content.length === 0) {
        content.push({title: 'Keine Beiträge, schau später wieder vorbei!', link: '#'})
      }

      for (const post of content) {
        postHtml += `<a href="${post.link}" data-swup-preload>
            <div class="post border shadow shadow--hover">
              <div class="post__title">${post.title}</div>
            </div>
          </a>`
      }

      domElement.innerHTML = postHtml
    }
  }

  class HeaderCategories extends HTMLElement {
    domChanger: DomChanger[] = [
      new DomChangerString('.js--title', 'title'),
      new DomChangerLinkHref('.js--link', 'link'),
      new DomChangerString('.js--details__count', 'count'),
      new DomChangerString('.js--details__last', 'lastPublishOrUpdate'),
      new DomChangerPosts('.js--posts', 'posts')
    ]

    preloadPages() {
      const swup = (window as unknown as {swup: {preloadPages: () => {}}}).swup;
      if (swup) {
        swup.preloadPages()
      }
    }

    connectedCallback() {
      this.registerButtons()
    }

    disconnectedCallback() {
      for (const {button, eventListener} of this.buttonEventListeners) {
        button.removeEventListener('click', eventListener)
      }
    }

    buttonEventListeners: {
      button: HTMLElement,
      eventListener: () => void
    }[] = []

    registerButtons() {
      const buttons: NodeListOf<HTMLElement> = this.querySelectorAll('.js--category-button');
      buttons.forEach((button) => {
        const eventListener = () => {
          const data = this.extractButtonData(button)
          for (const domChange of this.domChanger) {
            domChange.handler(data)
          }
          this.preloadPages()
        }
        button.addEventListener('click', eventListener)
        this.buttonEventListeners.push({button, eventListener})
      })
    }

    extractButtonData(button: HTMLElement): CategoryData {
      let posts: CategoryData['posts'] = []
      let lastPosts = button.dataset.lastPosts || '[]'

      try {
        posts = JSON.parse(lastPosts)
      } catch (e) {
        throw new Error('Could not parse posts')
      }

      const data: CategoryData = {
        title: button.textContent!,
        link: button.dataset.link!,
        description: button.dataset.description!,
        count: button.dataset.count!,
        lastPublishOrUpdate: button.dataset.lastPublishOrUpdate!,
        posts: posts
      }

      const missingKeys = Object.keys(data).filter((key) => !data[key as keyof CategoryData])

      if (missingKeys.length > 0) {
        throw new Error('Missing data: ' + missingKeys.join(', '));
      }

      return data
    }
  }

  customElements.define('header-categories', HeaderCategories);
</script>
